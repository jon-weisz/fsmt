#! /usr/bin/python

"""

This file is part of FINITE STATE MACHINE BASED TESTING.

Copyright(c) <Florian Lier, Norman Koester>
http://opensource.cit-ec.de/fsmt

This file may be licensed under the terms of the
GNU Lesser General Public License Version 3 (the ``LGPL''),
or (at your option) any later version.

Software distributed under the License is distributed
on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
express or implied. See the LGPL for the specific language
governing rights and limitations.

You should have received a copy of the LGPL along with this
program. If not, go to http://www.gnu.org/licenses/lgpl.html
or write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

The development of this software was supported by the
Excellence Cluster EXC 277 Cognitive Interaction Technology.
The Excellence Cluster EXC 277 is a grant of the Deutsche
Forschungsgemeinschaft (DFG) in the context of the German
Excellence Initiative.

Authors: Florian Lier, Norman Koester
<flier, nkoester>@techfak.uni-bielefeld.de

"""

import string
import random
import time
import sys


class MassiveOutTimed:
    def __init__(self, duration="-1", when="10", size_=80):
        """
        :param duration : Amount of time for the component to run in seconds,
        defaults to infinity
        """
        self.name = "MassiveOutPut"
        self.run_duration = duration
        self.event = int(when)
        self.size = size_
        print "MO init with dur %d event %d and size %d" % \
              (self.run_duration, self.event, self.size)

    def out_generator(self,
                      chars=string.ascii_uppercase + string.digits):
        """
        :rtype : A very long random string
        """
        return ''.join(random.choice(chars) for x in range(self.size))


if __name__ == '__main__':

    if len(sys.argv) == 3:
        dur = sys.argv[1]
        whe = sys.argv[2]
        mo = MassiveOutTimed(duration=int(dur), when=int(whe))
    elif len(sys.argv) == 4:
        dur = sys.argv[1]
        whe = sys.argv[2]
        size = sys.argv[3]
        mo = MassiveOutTimed(duration=int(dur), when=int(whe), size_=int(size))
    else:
        mo = MassiveOutTimed()
    start = time.time()
    line = 0
    if mo.run_duration == "-1":
        while True:
            if (time.time() - start) > mo.event:
                print line
                print ("Running forever")
                print mo.__class__
                print "FINDME"
                print mo.out_generator(
                    "ABCDEFGHIJKLMNOPQRSZUVWXYZ-.,><#*1234567890")
                time.sleep(0.2)
                line += 1
            time.sleep(0.1)
    else:
        while (time.time() - start) < mo.run_duration:
            if (time.time() - start) > mo.event:
                print line
                print "Running for %s" % str(time.time() - start)
                print mo.__class__
                print "FINDME"
                print mo.out_generator(
                    "ABCDEFGHIJKLMNOPQRSZUVWXYZ-.,><#*1234567890")
                line += 1
                time.sleep(0.2)
            else:
                time.sleep(0.1)
