#! /usr/bin/python

"""

This file is part of FINITE STATE MACHINE BASED TESTING.

Copyright(c) <Florian Lier, Norman Koester>
http://opensource.cit-ec.de/fsmt

This file may be licensed under the terms of the
GNU Lesser General Public License Version 3 (the ``LGPL''),
or (at your option) any later version.

Software distributed under the License is distributed
on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
express or implied. See the LGPL for the specific language
governing rights and limitations.

You should have received a copy of the LGPL along with this
program. If not, go to http://www.gnu.org/licenses/lgpl.html
or write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

The development of this software was supported by the
Excellence Cluster EXC 277 Cognitive Interaction Technology.
The Excellence Cluster EXC 277 is a grant of the Deutsche
Forschungsgemeinschaft (DFG) in the context of the German
Excellence Initiative.

Authors: Florian Lier, Norman Koester
<flier, nkoester>@techfak.uni-bielefeld.de

"""

# This is a wrapper script for the BIELEFELD VDEMO System Startup
# Framework.

import os
import sys
import time
import signal
import subprocess

if __name__ == '__main__':

    global sub_pid

    prefix = os.environ['prefix']
    path = prefix + "/etc/vdemo_scripts/component_scripts/"
    if not prefix:
        print ">> $prefix is not set"
        sys.exit(1)
    if len(sys.argv) < 2:
        print ">> Please provide a VDEMO component script"
        sys.exit(1)
    name = sys.argv[1]
    full_path = path + sys.argv[1]
    if not os.path.isfile(full_path):
        print ">> Component script does not exist %s" % str(full_path)
        sys.exit(1)

    def seek_read(f, _pos):
        pos = _pos
        data = []
        f.seek(pos, 0)
        data.append(f.read(512))
        return '\n'.join(''.join(data).splitlines()[:])

    def signal_handler(signal, frame):
        global sub_pid
        os.kill(sub_pid, 15)
        time.sleep(2)
        os.kill(sub_pid, 9)

    def run_vdemo_component(path, _name):
        global sub_pid

        u = os.environ['USER']
        logfile = "/tmp/"+u+"/" + _name + "_vdemo_wrapper.log"

        rm_cmd = "rm -f %s" % logfile
        rm_s = subprocess.Popen(rm_cmd, executable='/bin/bash', shell=True)
        rm_s.wait()

        # Set the STY name for RSB-Monitoring
        current_env = os.environ.copy()
        current_env['STY'] = "1337.bla.{name}_".format(name=_name.replace("component_", ""))

        # cmd = "exec xterm -l -lf " + logfile + " -e \"exec fsmt_vd_spawn %s\"" % path
        # cmd = "/bin/bash -ic \"source %s; component\"" % path
        cmd = "exec xterm -l -lf " + logfile + " -e \"exec /bin/bash -ic \'source %s; component  1>&2\'\" " % path
        print ">> Running: %s" % cmd
        proc_s = subprocess.Popen(cmd, env=current_env, executable='/bin/bash', shell=True)

        sub_pid = proc_s.pid

        file_position = 0
        been_read = 0

        while not os.path.exists(logfile):
            time.sleep(0.001)

        log_file = open(logfile, mode="r")

        while proc_s.poll() is None:
            try:
                log_lines = seek_read(log_file, file_position)
                been_read = len(log_lines)
                if log_lines != "" and log_lines != "\n" and been_read != 0:
                    print log_lines
                    file_position += been_read
            except Exception:
                pass
            time.sleep(0.05)

        proc_s.wait()
        log_file.close()

        print ">> Exiting"

    try:
        # Sometimes VDEMO in combination with the RSB_MONITOR
        # shows weird behavior, so we catch SIGINT and use SIGKILL instead.
        signal.signal(signal.SIGINT, signal_handler)
        run_vdemo_component(full_path, name)
    except Exception:
        pass
