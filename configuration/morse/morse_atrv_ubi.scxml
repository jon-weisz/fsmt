<scxml xmlns="http://www.w3.org/2005/07/scxml" xmlns:my_ns="de.unibi.citec.clf.fsmt" id="MORSE_Test" initial="initialise_test" version="1.0">
    <datamodel>
        <data expr="0" id="state_1_parallelcount" />
        <data id="environment">
            <variable val="/vol/sandbox/opt/blender/blender" var="MORSE_BLENDER" />
            <variable val="/vol/sandbox/" var="FSMPREFIX" />
            <variable val="/vol/sandbox/" var="MORSE_ROOT" />
        </data>
        <data id="hosts">
            <hostinfo ip="127.0.0.1" name="localhost" />
        </data>
        <data id="component_bundle">
            <component val="default">
                <command val="ls $FSMFSM" />
                <path val="/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="False" criteria="" ongoing="False" timeout="3" val="pid" />
                </check_execution>
            </component>
            <component val="roscore">
                <command val="roscore" />
                <path val="/opt/ros/groovy/bin" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="2" val="pid" />
                    <check_type blocking="True" criteria="started core service" ongoing="False" timeout="8" val="stdout" />
                </check_execution>
            </component>
            <component val="morse_check">
                <command val="morse check &amp;&amp; sleep 1" />
                <path val="$FSMPREFIX/bin" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="False" timeout="2" val="pid" />
                    <check_type blocking="True" criteria="Your environment is correctly setup to run MORSE" ongoing="False" timeout="5" val="stdout" />
                </check_execution>
            </component>
            <component val="morse">
                <command val="morse run $FSMPREFIX/share/morse/examples/tutorials/tutorial-1-ros.py" />
                <path val="$FSMPREFIX/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="2" val="pid" />
                    <check_type blocking="True" criteria="[SCENE INITIALIZED]" ongoing="False" timeout="10" val="stdout" />
                </check_execution>
            </component>
            <component val="send_angles">
                <command val="sh $FSMPREFIX/bin/sendangles.sh" />
                <path val="/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="2" val="pid" />
                    <check_type blocking="True" criteria="Sending Data to ATRV" ongoing="False" timeout="10" val="stdout" />
                </check_execution>
            </component>
            <component val="record_angles">
                <command val="sh $FSMPREFIX/bin/recordangles.sh" />
                <path val="/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="2" val="pid" />
                    <check_type blocking="True" criteria="Recording ARTV Angles" ongoing="False" timeout="10" val="stdout" />
                </check_execution>
            </component>
            <component val="xeyes">
                <command val="xeyes" />
                <path val="/usr/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="False" timeout="2" val="pid" />
                </check_execution>
            </component>
            <component val="none">
                <command val="ls /tmp" />
                <path val="/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="False" timeout="2" val="pid" />
                </check_execution>
            </component>
        </data>
    </datamodel>
    <transition event="unsatisfied_criteria" target="criteria_error">
        <log expr="'Received unsatisfied_criteria event!'" label="ERROR" />
    </transition>
    <transition event="execute_program.fail" target="execution_error">
        <log expr="'Recieved execution_error event!'" label="ERROR" />
    </transition>
    <state id="initialise_test">
        <onentry>
            <log expr="'Entering State initialise_test'" label="INFO" />
        </onentry>
        <transition target="run_test" />
        <onexit>
            <log expr="'Exiting State: initialise_test'" label="INFO" />
        </onexit>
    </state>
    <state id="run_test" initial="state_0">
        <state id="state_0">
            <onentry>
                <log expr="'Entering State: state_0'" label="INFO" />
                <my_ns:execute_program value="roscore" />
            </onentry>
            <transition event="state_0.execute_program.success" target="state_0_1" />
            <onexit>
                <log expr="'Exiting State: state_0'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_1">
            <onentry>
                <log expr="'Entering State: state_0_1'" label="INFO" />
                <my_ns:execute_program value="morse_check" />
            </onentry>
            <transition event="state_0_1.execute_program.success" target="state_0_2" />
            <onexit>
                <log expr="'Exiting State: state_0_1'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_2">
            <onentry>
                <log expr="'Entering State: state_0_2'" label="INFO" />
                <my_ns:execute_program value="morse" />
            </onentry>
            <transition event="state_0_2.execute_program.success" target="state_1" />
            <onexit>
                <log expr="'Exiting State: state_0_2'" label="INFO" />
            </onexit>
        </state>
        <parallel id="state_1">
            <onentry>
                <assign expr="0" location="state_1_parallelcount" />
                <log expr="'Entering State: state_1 (PARALLEL)'" label="INFO" />
            </onentry>
            <state id="state_1_pstate_0">
                <onentry>
                    <log expr="'Entering State: state_1_pstate_0'" label="INFO" />
                </onentry>
                <state id="state_1_pstate_0_state_0">
                    <onentry>
                        <log expr="'Entering State: state_1_pstate_0_state_0'" label="INFO" />
                        <my_ns:execute_program value="send_angles" />
                    </onentry>
                    <transition event="state_1_pstate_0_state_0.execute_program.success" target="state_1_pstate_0_final" />
                    <onexit>
                        <log expr="'Exiting State: state_1_pstate_0_state_0'" label="INFO" />
                    </onexit>
                </state>
                <final id="state_1_pstate_0_final">
                    <onentry>
                        <log expr="'Substate-Final reached: Increasing parallel counter state_1_parallelcount'" label="DEBUG" />
                        <assign expr="state_1_parallelcount+1" location="state_1_parallelcount" />
                    </onentry>
                </final>
                <onexit>
                    <log expr="'Exiting State: state_1_pstate_0'" label="INFO" />
                </onexit>
            </state>
            <state id="state_1_pstate_1">
                <onentry>
                    <log expr="'Entering State: state_1_pstate_1'" label="INFO" />
                </onentry>
                <state id="state_1_pstate_1_state_1">
                    <onentry>
                        <log expr="'Entering State: state_1_pstate_1_state_1'" label="INFO" />
                        <my_ns:execute_program value="record_angles" />
                    </onentry>
                    <transition event="state_1_pstate_1_state_1.execute_program.success" target="state_1_pstate_1_final" />
                    <onexit>
                        <log expr="'Exiting State: state_1_pstate_1_state_1'" label="INFO" />
                    </onexit>
                </state>
                <final id="state_1_pstate_1_final">
                    <onentry>
                        <log expr="'Substate-Final reached: Increasing parallel counter state_1_parallelcount'" label="DEBUG" />
                        <assign expr="state_1_parallelcount+1" location="state_1_parallelcount" />
                    </onentry>
                </final>
                <onexit>
                    <log expr="'Exiting State: state_1_pstate_1'" label="INFO" />
                </onexit>
            </state>
            <transition cond="state_1_parallelcount==2" target="pre_result_assessment_wait">
                <log expr="state_1_parallelcount" label="Exiting Count" />
            </transition>
            <onexit>
                <log expr="'Exiting State: state_1 (PARALLEL)'" label="INFO" />
            </onexit>
        </parallel>
        <state id="pre_result_assessment_wait">
            <onentry>
                <log expr="'Entering State: Wait (collecting data for 5 seconds)'" label="INFO" />
                <my_ns:emergency_exit value="666" />
                <send delay="'5s'" event="wait.finish" />
            </onentry>
            <transition event="wait.finish" target="result_assessment" />
            <onexit>
                <log expr="'Exiting State: Wait (collected data for 5 seconds)'" label="INFO" />
            </onexit>
        </state>
    </state>
    <state id="result_assessment" initial="clean">
        <state id="clean">
            <onentry>
                <log expr="'Entering State: Cleanup components'" label="INFO" />
                <my_ns:cleanUp expr="executable" value="" />
            </onentry>
            <transition target="assessment_state_0" />
            <onexit>
                <log expr="'Exiting State: Done cleaning up'" label="INFO" />
            </onexit>
        </state>
        <state id="assessment_state_0">
            <onentry>
                <log expr="'Entering State: assessment_state_0'" label="INFO" />
                <my_ns:execute_program value="none" />
            </onentry>
            <transition event="assessment_state_0.execute_program.success" target="assessment_pre_exit_test_wait" />
            <onexit>
                <log expr="'Exiting State: assessment_state_0'" label="INFO" />
            </onexit>
        </state>
        <state id="assessment_pre_exit_test_wait">
            <onentry>
                <log expr="'Entering State: Wait (collecting data for 2 seconds)'" label="INFO" />
                <my_ns:emergency_exit value="666" />
                <send delay="'2s'" event="wait.finish" />
            </onentry>
            <transition event="wait.finish" target="exit_test" />
            <onexit>
                <log expr="'Exiting State: Wait (collected data for 2 seconds)'" label="INFO" />
            </onexit>
        </state>
    </state>
    <state id="criteria_error">
        <onentry>
            <log expr="'criteria_error state entered - Exiting!'" label="ERROR" />
            <my_ns:error value="criteria" />
        </onentry>
        <transition target="exit_test" />
    </state>
    <state id="execution_error">
        <onentry>
            <log expr="'execution_error state entered - Exiting!'" label="ERROR" />
            <my_ns:error value="executionFail" />
        </onentry>
        <transition target="exit_test" />
    </state>
    <final id="exit_test">
        <onentry>
            <log expr="'Entering State: exit_test'" label="INFO" />
            <my_ns:cleanUp expr="executable" value="" />
        </onentry>
        <onexit>
            <log expr="'Exiting State: exit_test'" label="INFO" />
        </onexit>
    </final>
</scxml>
